


















    
        
    

    
        
    












<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en-us"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <atom:link href="https://nonrice.github.io/rss.xml" rel="self" type="application/rss+xml"/>

        

        <description>Recent content</description>

        
            <language>en-us</language>
        

        
            <lastBuildDate>Tue, 20 Feb 2024 20:33:41 -0400</lastBuildDate>
        

        <link>https://nonrice.github.io/</link>

        

        <title>Eric Xue&rsquo;s Web Site</title>

        

        
            <item>
                
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                
                    
                

                

                

                

                
                    <description><![CDATA[<p>You can use SQRT Decomposition On Queries to solve range query problems with some kind of update operation. It is not as well documented as another popular algorithm (Mo&rsquo;s Algorithm).</p>
<p>The best way to explain this technique is through example. You have the problem:</p>
<p>You have an array $a$ of $n$ integers. Process $q$ queries. Queries come in two types:</p>
<ol>
<li>Add $x$ to the range $[l, r]$</li>
<li>Compute the sum of the range $[l, r]$</li>
</ol>
<p>Let&rsquo;s see a naive solution: maintain prefix sum to compute type 2 queries in $\mathcal{O}(1)$. Then perform type 1 queries in $\mathcal{O}(n)$. It&rsquo;s too slow if we have many type 1 queries.</p>
<p>First observe- if we want to perform several type 1 queries at the same time, it can be done trivially in $\mathcal{O}(n)$. Secondly observe, given a type 1 query and a type 2 query, you can easily tell the effect of the type 1 query in $\mathcal{O}(1)$ by just looking at their intersection.</p>
<p>These two properties give a solution. We maintain prefix sum and a cache of queries. This cache does not exceed size $b$. Now let&rsquo;s look at how queries are handled.</p>
<ul>
<li>Type 1: Insert the query into the cache</li>
<li>Type 2: First use the prefix sum. Then for each query in the cache, add its effect to the answer.</li>
</ul>
<p>What if the cache exceeds size $b$? We need to empty it and apply its effect into the prefix sum. This is just like performing several type 1 queries at the same time, which is doable in linear time.</p>
<p>That&rsquo;s it. Now we see the running time. Unsurprisingly, $b=\sqrt{q}$. The total time complexity is simple to calculate and is $\mathcal{O}((n+q)\sqrt{q})$. It is fast enough for many problems.</p>
<p>Of course, this strategy is slower than segment tree, the primary DS used to tackle such RURQ problems. However, this strategy is far more versatile. You can handle many different kinds of queries and updates, without much thinking.</p>
]]></description>
                

                <guid  isPermaLink="false" >tag:nonrice.github.io,2024-02-20:2024-02-20T20:33:41-04:00</guid>

                
                    <link>https://nonrice.github.io/posts/sqrtdecompositiononqueries/</link>
                

                
                    <pubDate>Tue, 20 Feb 2024 20:33:41 -0400</pubDate>
                

                
                    <title>SQRT Decomposition On Queries</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                
                    
                

                

                

                

                
                    <description><![CDATA[<p>Everyone knows the traditinal binary search algorithm using $l$ and $r$ pointers. However to new CPers it is especially easy to make a bounds mistake. When I can&rsquo;t use <code>lower_bound</code> or the like I implement a different method of binary searching. It is similar to the binary lifting technique for trees.</p>
<p>Let $f(x)$ be a boolean function defined on the range $[l, r]$. It evaluates to $\text{true}$ for some prefix of $[l, r]$ and $\text{false}$ otherwise. We need to find the largest $x$ which gives a $\text{true}$ result. The implementation is as such:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> x <span style="color:#f92672">=</span> l<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> step<span style="color:#f92672">=</span>r<span style="color:#f92672">-</span>l<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>; step<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">1</span>; step<span style="color:#f92672">/=</span><span style="color:#ae81ff">2</span>){
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">while</span> (x<span style="color:#f92672">+</span>step <span style="color:#f92672">&lt;=</span> r <span style="color:#f92672">&amp;&amp;</span> f(x<span style="color:#f92672">+</span>step)){
</span></span><span style="display:flex;"><span>		x <span style="color:#f92672">+=</span> step;
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The idea is very simple. Start $x$ at the lower bound. Then make steps forward, maintaining $f(x)$ is $\text{true}$. Once no more steps can be made, make the step size smaller and repeat.</p>
<p>I think it is a much cleaner implementation of binary search. Yet, the only place I have seen it documented is in this <a href="https://darrenyao.com/usacobook/cpp.pdf">introductory USACO book</a>. However a decent CPer likely could think of it himself.</p>
]]></description>
                

                <guid  isPermaLink="false" >tag:nonrice.github.io,2024-02-10:2024-02-10T21:24:35-04:00</guid>

                
                    <link>https://nonrice.github.io/posts/easierbinarysearch/</link>
                

                
                    <pubDate>Sat, 10 Feb 2024 21:24:35 -0400</pubDate>
                

                
                    <title>Easier Binary Search</title>
                
            </item>
        
    </channel>
</rss>
